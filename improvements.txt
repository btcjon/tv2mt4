1. **Refactor Message Parsing:**
   - Use regex to extract information from messages.
   - Create a MessageParser class that returns a structured Message object.

2. **Implement Command Handlers:**
   - Create a base CommandHandler class.
   - Implement specific handlers for each action (e.g., UpdateSnRHandler, UpdateTrendHandler, SendPineConnectorCommandHandler).

3. **Configuration Management:**
   - Move patterns and keywords to a JSON or YAML configuration file.

4. **Logging and Monitoring:**
   - Make sure each part has logging

Step-by-Step Plan for Steps 1 and 2

*Important, use app10.py and airtable_operations.py as reference to the original code we are refactoring for our app.py, message_parser.py, message.py

**Once each item is "done" append "DONE" at the end of its line

A. Define a Message class:
   1. Create a new class called Message with an __init__ method.
   2. Add attributes to the Message class for symbol, command, and parameters with default values of None.

B. Define a MessageParser class:
   1. Create a new class called MessageParser.
   2. Define an __init__ method that initializes a dictionary to hold regex patterns for different message types.
   3. Add a parse method that takes a raw message as input and iterates over the regex patterns to find a match.
   4. For each message type, define a separate parsing method (e.g., parse_trend, parse_snr) that uses the corresponding regex pattern to extract information and returns a populated Message object.
        **List each message type below (list is incomplete, please list all)
        4a. trend
        4b. SnR

C. Update the webhook handler in app.py:
   1. Instantiate the MessageParser class in the webhook handler function.
   2. Use the parse method of the MessageParser instance to convert the raw incoming message into a structured Message object.
   3. Replace the existing parsing logic in the webhook handler with the new structured Message object to handle different actions.

D. Test the new message parsing logic:
   1. I will make live on server and we will send various messages to test from postman and see if they work
